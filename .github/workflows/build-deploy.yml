name: Build, Test and Deploy Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test and Build
        run: |
          mvn -B package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          docker buildx build --platform linux/arm64 -t ghcr.io/${{ github.repository_owner }}/actions-demo:latest --push .

      - name: Deploy to Hetzner
        env:
          HETZNER_HOST: ${{ secrets.HETZNER_HOST }}
          HETZNER_USERNAME: ${{ secrets.HETZNER_USERNAME }}
          HETZNER_SSH_KEY: ${{ secrets.HETZNER_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "$HETZNER_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $HETZNER_HOST >> ~/.ssh/known_hosts


          # (Re)deploying database
          cat > docker-compose.yml << 'EOF'
          services:
            postgres:
              image: postgres:latest
              platform: linux/amd64
              container_name: postgres
              ports:
                - "5432:5432"
              environment:
                - POSTGRES_DB=${{ secrets.POSTGRES_DB }}
                - POSTGRES_USER=${{ secrets.POSTGRES_USER }}
                - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_PASSWORD }}"]
                interval: 10s
                timeout: 5s
                retries: 5
                
                
            actions-demo:
              image: ghcr.io/${{ github.repository_owner }}/actions-demo:latest
              container_name: actions-demo
              ports:
                - "9080:9080"
                - "9443:9443"
              depends_on:
                postgres:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "curl -s -f http://localhost:9080/rest/health || exit 1"]
                interval: 10s
                timeout: 5s
                retries: 30
              restart: unless-stopped
                
          volumes:
            postgres_data:
              name: postgres_data
          EOF
      
          # Stop any existing containers
          docker compose down

          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
          # Start the database
          docker compose up -d
      
          timeout 300 bash -c 'while ! docker-compose logs actions-demo 2>&1 | grep -q "CWWKF0011I: The defaultServer server is ready"; do sleep 2; done' || { docker-compose logs actions-demo exit 1 }

          for i in {1..5}; do if docker-compose exec -T actions-demo curl -s -f http://localhost:9080/rest/health > /dev/null; then exit 0 fi sleep 5 done
          
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh $HETZNER_USERNAME@$HETZNER_HOST:/root/deploy.sh
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $HETZNER_USERNAME@$HETZNER_HOST "chmod +x /root/deploy.sh && /root/deploy.sh"

      - name: Cleanup
        if: always()
        run: rm -rf ~/.ssh/deploy_key

      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
