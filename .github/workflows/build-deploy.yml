name: Build, Test and Deploy Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test and Build
        run: |
          mvn -B package --file pom.xml

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Hetzner
        env:
          HETZNER_HOST: ${{ secrets.HETZNER_HOST }}
          HETZNER_USERNAME: ${{ secrets.HETZNER_USERNAME }}
          HETZNER_SSH_KEY: ${{ secrets.HETZNER_SSH_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "$HETZNER_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $HETZNER_HOST >> ~/.ssh/known_hosts
          
          # Create deployment directory structure
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          
          # Create deployment directory
          mkdir -p ~/actions-demo/target
          cd ~/actions-demo
          
          # Create .env file
          cat > .env << EOFENV
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          EOFENV
          
          # Stop and remove existing containers
          docker-compose down || true
          
          # Start services
          docker-compose up -d
          
          # Wait for application to be ready
          timeout 300 bash -c 'while ! docker-compose logs app 2>&1 | grep -q "CWWKF0011I: The defaultServer server is ready"; do sleep 2; done' || {
            docker-compose logs
            exit 1
          }
          
          # Health check
          for i in {1..5}; do
            if curl -s -f http://localhost:9080/rest/health > /dev/null; then
                exit 0
            fi
            sleep 5
          done
          
          docker-compose logs
          exit 1
          EOF
          
          # Copy deployment files
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh $HETZNER_USERNAME@$HETZNER_HOST:/root/deploy.sh
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no docker-compose.yml $HETZNER_USERNAME@$HETZNER_HOST:/root/actions-demo/docker-compose.yml
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no target/actions-demo.war $HETZNER_USERNAME@$HETZNER_HOST:/root/actions-demo/target/
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no src/main/liberty/config/server.xml $HETZNER_USERNAME@$HETZNER_HOST:/root/actions-demo/src/main/liberty/config/
          
          # Execute deployment
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $HETZNER_USERNAME@$HETZNER_HOST "chmod +x /root/deploy.sh && /root/deploy.sh"

      - name: Cleanup
        if: always()
        run: rm -rf ~/.ssh/deploy_key

      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6